using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

namespace MSBuild.ResGen
{
    public sealed class AutoResGen : Task
    {
        [Required]
        public ITaskItem[] ResxFiles { get; set; }
        [Required]
        public string OutputPath { get; set; }
        [Required]
        public string RootNamespace { get; set; }
        [Output]
        public ITaskItem[] OutputFiles { get; set; }

        public override bool Execute()
        {
            List<ITaskItem> outputs = new List<ITaskItem>();

            foreach (var taskItem in ResxFiles)
            {
                string baseName = taskItem.GetMetadata("FileName");
                string csCode = GetStronglyTypeCsFileForResx(taskItem.GetMetadata("FullPath"), "", RootNamespace + "." + baseName);

                string outputPath = Path.Combine(OutputPath, baseName + ".cs");
                File.WriteAllText(outputPath, csCode);
                outputs.Add(new TaskItem(outputPath));
            }

            OutputFiles = outputs.ToArray();
            return true;
        }

        private static string GetStronglyTypeCsFileForResx(string xmlPath, string moduleName, string className)
        {
            // Example
            //
            // className = Full.Name.Of.The.ClassFoo
            // shortClassName = ClassFoo
            // namespaceName = Full.Name.Of.The

            string shortClassName = className;
            string namespaceName = null;
            int lastIndexOfDot = className.LastIndexOf('.');
            if (lastIndexOfDot != -1)
            {
                namespaceName = className.Substring(0, lastIndexOfDot);
                shortClassName = className.Substring(lastIndexOfDot + 1);
            }

            var entries = new StringBuilder();
            XElement root = XElement.Parse(File.ReadAllText(xmlPath));
            foreach (var data in root.Elements("data"))
            {
                string value = data.Value.Replace("\n", "\n    ///");
                string name = data.Attribute("name").Value.Replace(' ', '_');
                entries.AppendFormat(ENTRY, name, value);
            }

            string bodyCode = string.Format(BODY, shortClassName, moduleName, entries.ToString(), className, (string.IsNullOrEmpty(moduleName) ? "" : "."));
            if (namespaceName != null)
            {
                bodyCode = string.Format(NAMESPACE, namespaceName, bodyCode);
            }

            string resultCode = string.Format(BANNER, bodyCode).Replace("\r\n?|\n", "\r\n");
            return resultCode;
        }

        private static readonly string BANNER = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a dotnet run from src\ResGen folder.
//     To add or remove a member, edit your .resx file then rerun src\ResGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

{0}
";

        private static readonly string NAMESPACE = @"
namespace {0} {{
{1}
}}
";
        private static readonly string BODY = @"
using System;
using System.Reflection;

/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""System.Resources.Tools.StronglyTypedResourceBuilder"", ""4.0.0.0"")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]

internal class {0} {{

    private static global::System.Resources.ResourceManager resourceMan;

    private static global::System.Globalization.CultureInfo resourceCulture;

    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(""Microsoft.Performance"", ""CA1811:AvoidUncalledPrivateCode"")]
    internal {0}() {{
    }}

    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager {{
        get {{
            if (object.ReferenceEquals(resourceMan, null)) {{
                global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(""{1}{4}{3}.resources"", typeof({0}).GetTypeInfo().Assembly);
                resourceMan = temp;
            }}
            return resourceMan;
        }}
    }}

    /// <summary>
    ///   Overrides the current threads CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture {{
        get {{
            return resourceCulture;
        }}
        set {{
            resourceCulture = value;
        }}
    }}
    {2}
}}
";

    private static readonly string ENTRY = @"

    /// <summary>
    ///   Looks up a localized string similar to {1}
    /// </summary>
    internal static string {0} {{
        get {{
            return ResourceManager.GetString(""{0}"", resourceCulture);
        }}
    }}
";    }
}
